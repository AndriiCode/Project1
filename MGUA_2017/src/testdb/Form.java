/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testdb;

import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.sql.*;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author user
 */
public class Form extends javax.swing.JFrame {

    static float regul1;
    static float regul2;
    int JJ = 9;
    int j;
    int row = JJ * 2 + 1;
    static float[] prognoz1 = new float[13];
    static float[] prognoz2 = new float[13];

    public float Xprob[][] = new float[row][JJ];
    float Yprob[] = new float[row];
    static float[] koef1 = new float[19];
    static float[] koef2 = new float[19];

    /*  float getProg(){
        return prognoz;
    }*/
    float[][] getXP() {
        return Xprob;
    }

    float[] getYP() {
        return Yprob;
    }

    int getJJ() {
        return JJ;
    }

    int getRow() {
        return row;
    }

    public void Table() {
        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = null;
            if (c3.getSelectedItem() == "All") {
                Query = "SELECT * FROM  testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "')";
            } else {
                Query = "SELECT * FROM testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "' and city_data = '" + c3.getSelectedItem() + "') ";
            }
            ResultSet rs = stmt.executeQuery(Query);
            table1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    final void FillList() {

        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = "SELECT DISTINCT year FROM info  WHERE id_data != 'NULL' ORDER by year";
            ResultSet rs = stmt.executeQuery(Query);
            c3.addItem("All");
            while (rs.next()) {

                c1.addItem(rs.getString(1));
                c2.addItem(rs.getString(1));
            }
            Statement stmt1 = con.createStatement();
            String Query1 = "SELECT DISTINCT city_data FROM info WHERE id_data != 'NULL'";
            ResultSet rs1 = stmt.executeQuery(Query1);
            while (rs1.next()) {
                c3.addItem(rs1.getString(1));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        FillList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        c1 = new javax.swing.JComboBox<>();
        b1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        c2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        c3 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        d1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        d2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b1.setText("Выбрать");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table1);

        jLabel5.setText("Выборка из таблицы");

        jLabel6.setText("От");

        jLabel7.setText("До");

        jLabel1.setText("Город");

        d1.setText("Добавить данные");
        d1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d1ActionPerformed(evt);
            }
        });

        b2.setText("Создать модель");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        jButton1.setText("Назад");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        d2.setText("Удалить данные");
        d2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(c3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(d2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))))
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(234, 234, 234)
                            .addComponent(b1))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)))
                            .addComponent(jButton1))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(d1))
                        .addGap(17, 17, 17)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(d2)
                        .addGap(23, 23, 23)))
                .addComponent(b1)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(b2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = null;
            if (c3.getSelectedItem() == "All") {
                Query = "SELECT * FROM  testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "')";
            } else {
                Query = "SELECT * FROM testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "' and city_data = '" + c3.getSelectedItem() + "') ";
            }
            ResultSet rs = stmt.executeQuery(Query);
            table1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }


    }//GEN-LAST:event_b1ActionPerformed

    private void d1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d1ActionPerformed

        Auth auth = new Auth();
        int id = auth.getID();
        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = "SELECT position FROM users WHERE id_user = '" + id + "'";

            String post = null;
            ResultSet rs = stmt.executeQuery(Query);
            while (rs.next()) {
                post = rs.getString(1);
            }
            if (post.equals("Admin")) {
                Form fr = new Form();
                fr.setVisible(false);
                dispose();
                AddDB adddb = new AddDB();
                adddb.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Access is denied");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }


    }//GEN-LAST:event_d1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // float [][] Xprob = new float[10][9] ;

        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = null;
            if (c3.getSelectedItem() == "All") {
                Query = "SELECT x1,x2,x3,x4,x5,x6,x7,x8,x9,y FROM  testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "') LIMIT 19";
            } else {
                Query = "SELECT x1,x2,x3,x4,x5,x6,x7,x8,x9,y FROM testview WHERE id_data IN (SELECT id_data FROM info WHERE year >= '" + c2.getSelectedItem() + "' and year <= '" + c1.getSelectedItem() + "' and city_data = '" + c3.getSelectedItem() + "') LIMIT 19";
            }

            //  String Query = "SELECT x1,x2,x3,x4,x5,x6,x7,x8,x9,y FROM testview WHERE id_data IN (SELECT id_data FROM info WHERE year = 'test') LIMIT 19";
            ResultSet rs = stmt.executeQuery(Query);
            int c = 0;
            while (rs.next()) {
                for (int i = 0; i < JJ; i++) {
                    Xprob[c][i] = rs.getFloat(i + 1);
                }
                Yprob[c] = rs.getFloat(JJ + 1);
                c++;
            }

            for (int i = 0; i < row; i++) {
                for (j = 0; j < JJ; j++) {
                    System.out.print(Xprob[i][j] + " ");

                }
                System.out.println();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        Work work1 = new Work();
        Work work2 = new Work();
        ThreadWork w1 = new ThreadWork();
        ThreadWork w2 = new ThreadWork();
        //float [][] ResultMatrix1 = w1.NewMatrix(Xprob,0);
        //float [][] ResultMatrix2 = w2.NewMatrix(Xprob,1);
        Main.count = 0;
        PotokWork half1t = new PotokWork(Xprob, 0);
        half1t.start();
        PotokWork half2t = new PotokWork(Xprob, 1);
        half2t.start();
        synchronized (Main.lock) {
            while (Main.count < 2) {
                try {
                    Main.lock.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        koef1 = work1.Koeff(half1t.ResultMatrix, Yprob);
        koef2 = work2.Koeff(half2t.ResultMatrix, Yprob);

        try {
            float x1 = 0;
            float x2 = 0;
            float x3 = 0;
            float x4 = 0;
            float x5 = 0;
            float x6 = 0;
            float x7 = 0;
            float x8 = 0;
            float x9 = 0;
            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = "SELECT x1,x2,x3,x4,x5,x6,x7,x8,x9 FROM testview Where city_data = 'Cherkasy'";

            ResultSet rs = stmt.executeQuery(Query);
            int i = 0;
            while (rs.next()) {
                x1 = rs.getFloat(1);
                x2 = rs.getFloat(2);
                x3 = rs.getFloat(3);
                x4 = rs.getFloat(4);
                x5 = rs.getFloat(5);
                x6 = rs.getFloat(6);
                x7 = rs.getFloat(7);
                x8 = rs.getFloat(8);
                x9 = rs.getFloat(9);

                //
                prognoz1[i] = (float) (koef1[0] + koef1[1] * x1 + koef1[2] * x2 + koef1[3] * x3 + koef1[4] * x4 + koef1[5] * x5 + koef1[6] * x6 + koef1[7] * x7 + koef1[8] * x8 + koef1[9] * x9 + koef1[10] * x1 * x1 + koef1[11] * x2 * x2 + koef1[12] * x3 * x3 + koef1[13] * x4 * x4 + koef1[14] * x5 * x5 + koef1[15] * x6 * x6 + koef1[16] * x7 * x7 + koef1[17] * x8 * x8 + koef1[18] * x9 * x9);
                prognoz2[i] = (float) (koef2[0] + koef2[1] * x1 + koef2[2] * x2 + koef2[3] * x3 + koef2[4] * x4 + koef2[5] * x5 + koef2[6] * x6 + koef2[7] * x7 + koef2[8] * x8 + koef2[9] * x9 + koef2[10] * x1 * x2 + koef2[11] * x2 * x3 + koef2[12] * x3 * x4 + koef2[13] * x4 * x5 + koef2[14] * x5 * x6 + koef2[15] * x6 * x7 + koef2[16] * x7 * x8 + koef2[17] * x8 * x9 + koef2[18] * x9 * x1);
                i++;

            }
            /*   for( i =0; i <13;i++){
            System.out.println(prognoz[i]);
      }*/
            Regular regular1 = new Regular();
            regul1 = regular1.Regul(Yprob, prognoz1);
            System.out.println(regul1);
            Regular regular2 = new Regular();
            regul2 = regular2.Regul(Yprob, prognoz2);
            System.out.println(regul2);
            // prognoz = (float) (koef[0] + koef[1]*x1 + koef[2]*x2 + koef[3]*x3 + koef[4]*x4 + koef[5]*x5 + koef[6]*x6 + koef[7]*x7 + koef[8]*x8 + koef[9]*x9 + koef[10]*x1*x1 + koef[11]*x2*x2 + koef[12]*x3*x3 + koef[13]*x4*x4 + koef[14]*x5*x5 + koef[15]*x6*x6 + koef[16]*x7*x7 + koef[17]*x8*x8 + koef[18]*x9*x9);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        Graf graf = new Graf();
        graf.setVisible(true);
    }//GEN-LAST:event_b2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void d2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d2ActionPerformed
        Auth auth = new Auth();
        int id = auth.getID();
        try {

            String url = "jdbc:mysql://localhost:3306/db_diplom";
            String username = "Andrey";
            String password = "1111";
            Connection con = DriverManager.getConnection(url, username, password);

            Statement stmt = con.createStatement();

            String Query = "SELECT position FROM users WHERE id_user = '" + id + "'";

            String post = null;
            ResultSet rs = stmt.executeQuery(Query);
            while (rs.next()) {
                post = rs.getString(1);
            }
            if (post.equals("Admin")) {
                int row = table1.getSelectedRow();
                int s = (int) table1.getValueAt(row, 0);
                System.out.println(s);
                try {

                    Statement stmt1 = con.createStatement();

                    String Query1 = "DELETE FROM data WHERE id_data = '" + s + "'";

                    stmt1.execute(Query1);
                    JOptionPane.showMessageDialog(null, "Данные удалены");
                    Table();
                    c1.removeAllItems();
                    c2.removeAllItems();
                    c3.removeAllItems();
                    FillList();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Access is denied");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }


    }//GEN-LAST:event_d2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JComboBox<String> c1;
    private javax.swing.JComboBox<String> c2;
    private javax.swing.JComboBox<String> c3;
    private javax.swing.JButton d1;
    private javax.swing.JButton d2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}
